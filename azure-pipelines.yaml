variables:
 - group: azurecreds

trigger:
- main

stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - task: DownloadSecureFile@1
      displayName: Download azurecreds.conf file
      name: azurecreds
      inputs:
        secureFile: 'azurecreds.conf'

    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'id_rsa'
    
    - task: Bash@3
      displayName: ls /home/vsts/work/_temp/
      inputs:
        targetType: 'inline'
        script: |
          ls /home/vsts/work/_temp/

    #- task: Bash@3
    #  displayName: mkdir /.ssh/autohorized_keys/
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      sudo mkdir -p /home/vsts/.ssh/authorized_keys/

    #- task: Bash@3
    #  displayName: ls /home/vsts/
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      ls /home/vsts/

    #- task: Bash@3
    #  displayName: ls
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      ls -la ~/.ssh/authorized_keys

    #- task: CopyFiles@2
    #  displayName: Copy & paste ida_rsa
    #  inputs:
    #    #SourceFolder: $(Agent.TempDirectory)
    #    SourceFolder: '/home/vsts/work/_temp/'
    #    Contents: 'id_rsa.pub'
    #    TargetFolder: '/home/vsts/.ssh/authorized_keys/'

    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.0.0'

    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-backend-config=$(azurecreds.secureFilePath)'
        backendServiceArm: 'azurerm-sc'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate26325'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: azurerm-sc
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)
    
    - task: TerraformTaskV2@2
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-auto-approve'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'azurerm-sc'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium'

- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'azurerm-sc'
              appType: 'webApp'
              WebAppName: 'udacitytest-AppService-czofficial'
              packageForLinux: '$(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip'
              DeploymentType: zipDeploy

  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              # Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
              # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
            env: 
              AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
            displayName: Configure VM